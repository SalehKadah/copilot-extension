// Mocks generated by Mockito 5.4.6 from annotations
// in copilot_extension/test/copilot_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:copilot_extension/models/copilot_settings_model.dart' as _i4;
import 'package:copilot_extension/models/suggestion_model.dart' as _i5;
import 'package:copilot_extension/services/github_copilot_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GitHubCopilotService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGitHubCopilotService extends _i1.Mock
    implements _i2.GitHubCopilotService {
  MockGitHubCopilotService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> initialize(_i4.CopilotSettingsModel? settings) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [settings],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i5.SuggestionModel>> getSuggestions({
    required String? code,
    required String? language,
    required int? cursorPosition,
    String? filePath,
    int? maxSuggestions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSuggestions,
          [],
          {
            #code: code,
            #language: language,
            #cursorPosition: cursorPosition,
            #filePath: filePath,
            #maxSuggestions: maxSuggestions,
          },
        ),
        returnValue: _i3.Future<List<_i5.SuggestionModel>>.value(
            <_i5.SuggestionModel>[]),
      ) as _i3.Future<List<_i5.SuggestionModel>>);

  @override
  void cancelAllRequests() => super.noSuchMethod(
        Invocation.method(
          #cancelAllRequests,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cancelRequest(String? requestId) => super.noSuchMethod(
        Invocation.method(
          #cancelRequest,
          [requestId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateSettings(_i4.CopilotSettingsModel? settings) => super.noSuchMethod(
        Invocation.method(
          #updateSettings,
          [settings],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<bool> reconnect() => (super.noSuchMethod(
        Invocation.method(
          #reconnect,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
