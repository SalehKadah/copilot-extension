name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Job 1: Code Analysis
  analyze:
    name: 🔍 Analyze Code
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true
          
      - name: 📦 Install dependencies
        run: flutter pub get
        
      - name: 🔍 Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        
      - name: 📊 Analyze project source
        run: flutter analyze --no-fatal-infos
        
      - name: ✅ Check pub score
        run: |
          flutter pub publish --dry-run

  # Job 2: Testing
  test:
    name: 🧪 Run Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        flutter-version: ['3.16.0', '3.19.0']
        
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🎯 Setup Flutter ${{ matrix.flutter-version }} on ${{ matrix.os }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.flutter-version }}
          channel: 'stable'
          cache: true
          
      - name: 📦 Install dependencies
        run: flutter pub get
        
      - name: 🧪 Run unit tests
        run: flutter test --reporter expanded --coverage
        
      - name: 📊 Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.flutter-version == '3.16.0'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-copilot-extension
          fail_ci_if_error: false

  # Job 3: Build
  build:
    name: 🔨 Build Application
    runs-on: ${{ matrix.os }}
    needs: [analyze, test]
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
            build-cmd: flutter build linux --release
            artifact-path: build/linux/x64/release/bundle
            artifact-name: copilot-extension-linux
            
          - os: windows-latest
            target: windows
            build-cmd: flutter build windows --release
            artifact-path: build/windows/runner/Release
            artifact-name: copilot-extension-windows
            
          - os: macos-latest
            target: macos
            build-cmd: flutter build macos --release
            artifact-path: build/macos/Build/Products/Release
            artifact-name: copilot-extension-macos
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true
          
      - name: 📦 Install dependencies
        run: flutter pub get
        
      - name: 🔨 Build for ${{ matrix.target }}
        run: ${{ matrix.build-cmd }}
        
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}
          retention-days: 7
          if-no-files-found: error

  # Job 4: Documentation Check
  docs:
    name: 📚 Check Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true
          
      - name: 📦 Install dependencies
        run: flutter pub get
        
      - name: 📚 Generate documentation
        run: dart doc .
        
      - name: ✅ Verify documentation completeness
        run: |
          echo "Checking documentation files..."
          test -f "README.md" || exit 1
          test -f "CHANGELOG.md" || exit 1
          test -f "CONTRIBUTING.md" || exit 1
          test -f "LICENSE" || exit 1
          echo "✅ All required documentation files present"

  # Job 5: Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true
          
      - name: 📦 Install dependencies
        run: flutter pub get
        
      - name: 🔒 Run dependency audit
        run: |
          flutter pub outdated
          # Check for known vulnerabilities
          echo "Checking for security vulnerabilities..."

  # Job 6: Performance Test
  performance:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🎯 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
          cache: true
          
      - name: 📦 Install dependencies
        run: flutter pub get
        
      - name: ⚡ Run performance tests
        run: |
          echo "Running performance benchmarks..."
          flutter test test/performance/
          
      - name: 📊 Generate performance report
        run: |
          echo "Performance test completed successfully"

  # Job 7: Release
  release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: [analyze, test, build, docs, security]
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
          
      - name: 📦 Create release archives
        run: |
          cd artifacts
          for dir in */; do
            zip -r "${dir%/}.zip" "$dir"
          done
          
      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 8: Notification
  notify:
    name: 📢 Notify Status
    runs-on: ubuntu-latest
    needs: [analyze, test, build, docs, security, performance]
    if: always()
    
    steps:
      - name: 📢 Build Status
        run: |
          echo "CI/CD Pipeline completed!"
          echo "✅ Code Analysis: ${{ needs.analyze.result }}"
          echo "✅ Tests: ${{ needs.test.result }}"
          echo "✅ Build: ${{ needs.build.result }}"
          echo "✅ Documentation: ${{ needs.docs.result }}"
          echo "✅ Security: ${{ needs.security.result }}"
          echo "✅ Performance: ${{ needs.performance.result }}"
